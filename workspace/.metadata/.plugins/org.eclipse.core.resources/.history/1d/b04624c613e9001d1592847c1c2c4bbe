package com.mci.model;

import com.mci.model.Type.WagonType;

public class Wagon extends TrainComponents {
	private int counterOfPassengers;
	private final int MAX_CAPACITY;
	private WagonType type;
	private final double MIN_WEIGHT;// the unit is ton
	private double current_weight;
	private final double LENGHT;

	public Wagon(String manufacturer, int serialNum, int year, WagonType type) {
		super(manufacturer, serialNum, year);
		this.type = type;
		if (type.equals(WagonType.PASSENGER)) {
			this.counterOfPassengers = 0;
			this.MIN_WEIGHT = 20000;
			this.LENGHT = 20;
			this.MAX_CAPACITY = 40;
		} else {
			this.MIN_WEIGHT = 25000;
			this.LENGHT = 15;
			this.MAX_CAPACITY = 50000;
		}

	}

	public Wagon() {
		this.MIN_WEIGHT = 25000;
		this.LENGHT = 15;
		this.MAX_CAPACITY = 50000;
	}

	public int getPassengers() {
		return this.counterOfPassengers;
	}

	public void addPassanger() throws IllegalArgumentException {
		if (getType().equals(WagonType.PASSENGER)) {
			if (getMAX_CAPACITY() >= getPassengers()) {
				this.counterOfPassengers++;
			} else {
				
			}throw new IllegalArgumentException("PASSENGER Capacity has already reached the maximum value.");
		} else {
			throw new IllegalArgumentException(
					"addPassanger method is only for PassangerWagon, you should use addCargo.");
		}

	}

	public double getCurrentCapacity() {
		double result = 0;
		if (getType().equals(WagonType.PASSENGER)) {
			result = getMAX_CAPACITY() - getPassengers();
		} else {
			result = (getMAX_CAPACITY() - getCurrentWeight());
		}
		return result;
	}

	public void addCargo(double weight) {
		if (getType().equals(WagonType.CARGO)) {
			double curentCapacity = (getMAX_CAPACITY() - getCurrentWeight());
			if (curentCapacity >= weight) {
				this.set_weight(weight);
			} else {
				throw new IllegalArgumentException("Cargo Capacity has already reached the maximum value.");
			}
		} else {
			throw new IllegalArgumentException("addCargo method is only for CargoWagon, you should use addPassenger.");
		}
	}

	public void setType(WagonType type) {
		this.type = type;
	}

	public WagonType getType() {
		return type;
	}

	public void set_weight(double weight) {
		this.current_weight += weight;
	}

	public int getMAX_CAPACITY() {
		return MAX_CAPACITY;
	}

	public double getMIN_WEIGHT() {
		return MIN_WEIGHT;
	}

	@Override
	public double getCurrentWeight() {
		return current_weight + getMIN_WEIGHT();
	}

	@Override
	public double getCurrentLenght() {

		return this.LENGHT;
	}

	@Override
	public String toString() {
		return "Wagon [counterOfPassengers=" + counterOfPassengers + ", MAX_CAPACITY=" + MAX_CAPACITY + ", type=" + type
				+ ", MIN_WEIGHT=" + MIN_WEIGHT + ", current_weight=" + current_weight + ", LENGHT=" + LENGHT
				+ ", getYear()=" + getYear() + ", getManufacturer()=" + getManufacturer() + ", getSerialNum()="
				+ getSerialNum() + ", getNext()=" + getNext() + ", getPrev()=" + getPrev() + ", getClass()="
				+ getClass() + ", hashCode()=" + hashCode() + ", toString()=" + super.toString() + "]";
	}

}
